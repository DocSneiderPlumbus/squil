@using ColorHelper

@{
    var entities = Ui.RelatedEntites;
    var extent = entities.Extent;
    var parentEntity = Ui.Entity;

    var lastIndex = entities.Extent.Limit?.Apply(l => l - 1);

    var classes = new List<String>();

    classes.Add("entity-relation");
    classes.Add(entities.RelationEnd.IsMany ? "entity-relation-plural" : "entity-relation-singular");
    if (entities.List.Length == 0) classes.Add("is-empty");

    var isLeaf = !entities.Extent.Children.Any();

    var styleForHue = GetStyleForHue(entities.RelationEnd.Table.Hue);

    var flavor = entities.Extent.Flavor.Apply(f => f.GetCssValue(isLeaf));

    var ai = Ui.RelatedEntites.GetListAnnotationInfo();

    var hadOnlyMatching = true;
}

<div class="@String.Join(' ', classes)" style="@styleForHue">
    <label>
        <a href="@Context.RenderEntitiesUrl(parentEntity, entities)">
            <EntityRelationNameView RelatedEntities="entities" />
        </a>
    </label>
    <ol data-flavor="@flavor">
        @if (entities.List.Length == 0)
        {
            if (ai.wasSearch)
            {
                <li class="list-marker">
                    No results could be found with @ai.column @ai.direction.GetPrettyOperator() @ai.value.
                </li>
            }
            else
            {
                <li class="list-marker list-marker-empty">
                    This table or related slice is empty.
                </li>
            }
        }

        @if (ai.wasSearch && ai.matchCount > 0)
        {
            if (ai.afterCount == 0)
            {
                <li class="list-marker">
                    All @ai.matchCount loaded results are exact matches with @ai.column = @ai.value.
                </li>
            }
            else
            {
                <li class="list-marker">
                    The first @ai.matchCount results are exact matches with @ai.column = @ai.value.
                </li>
            }
        }

        @for (var i = 0; i < entities.List.Length; ++i)
        {
            var entity = entities.List[i];

            var itemClasses = i == lastIndex ? "potentially-last" : null;

            if (ai.wasSearch && hadOnlyMatching && entity.IsMatching == false)
            {
                hadOnlyMatching = false;

                <li class="list-marker">
                    The following items are not exact matches and come after the search value with @ai.column @ai.direction.GetPrettyOperator() @ai.value.
                </li>
            }

            <li class="@itemClasses">
                <EntityContentView Entity="entity" ParentCollection="entities" />
            </li>
        }

        @if (entities.List.Length == entities.Extent.Limit)
        {
            <li class="list-marker list-marker-ellipsis" />
        }
    </ol>
</div>

@code {
    [Parameter]
    public EntityRelationFieldUi Ui { get; set; }

    [CascadingParameter]
    public QueryContext Context { get; set; }

    String GetColorForHue(Double hue, Int32 s, Int32 l)
    {
        var hsl = new HSL((int)hue, (byte)s, (byte)l);

        return ColorConverter.HslToHex(hsl).Value;
    }

    String GetStyleForHue(Double hue)
    {
        String style = "";

        style += $"--entity-bg-1: #{GetColorForHue(hue, 20, 90)};";
        style += $"--entity-bg-0: #{GetColorForHue(hue, 20, 95)};";

        return style;
    }
}
