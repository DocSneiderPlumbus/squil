@inject IJSRuntime js

<span class="index-column index-column-text d-flex flex-column border">

    <span @ref="element" class="index-column-value outline-none" contenteditable="@IsActive" @oninput="HandleChange" />

    <span class="index-column-name" type="text">@Name</span>

</span>

@code {
    [Parameter]
    public String Name { get; set; }

    [Parameter]
    public Boolean IsActive { get; set; }

    [Parameter]
    public String Value { get; set; }

    [Parameter]
    public Boolean Focus { get; set; }

    [Parameter]
    public EventCallback<String> ValueChanged { get; set; }

    ElementReference element;

    Boolean wasActive;

    String DesiredInnerText => Value ?? "";

    String innerText;

    public ValueTask FocusAsync() => element.FocusAsync();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!wasActive && IsActive && Focus)
        {
            await FocusAsync();
        }

        wasActive = IsActive;

        if (innerText != DesiredInnerText)
        {
            //await js.InvokeVoidAsync("console.info", $"server: set value of '{element}' to '{DesiredInnerText}' in {firstRender}");

            await js.InvokeVoidAsync("setInnerText", element, DesiredInnerText);

            innerText = DesiredInnerText;
        }
    }

    async Task HandleChange(ChangeEventArgs e)
    {
        innerText = await js.InvokeAsync<String>("getInnerText", element);

        var newValue = innerText == "" ? null : innerText;

        if (newValue != Value)
        {
            await ValueChanged.InvokeAsync(newValue);
        }
    }
}
