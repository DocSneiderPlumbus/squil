@inject NavigationManager Nav

@{
    var columns = Index.Index.ColumnNames.Skip(HiddenPrefixLength).ToArray();
    var validation = Index.ValidatedValues?.Skip(HiddenPrefixLength).ToArray();
}

<a class="@ClassNames("index", "current".If(Index.IsCurrent), "no-index".If(Index.IsNoIndex))" href="@Url" @onclick="HandleClick" @onclick:preventDefault>
    <fieldset>
        <div class="index-columns d-flex">
            @for (var i = 0; i < columns.Length; ++i)
            {
                var c = columns[i];
                var isOk = validation?[i].IsOk ?? true;

                var first = i == 0;

                <span class="index-column index-column-text d-flex flex-column @ClassNames("index-column-error".If(!isOk), "no-index-column".If(Index.IsNoIndex))">
                    @if (Index.IsNoIndex)
                    {
                        <span class="align-self-center text-muted">no suitable index for search</span>
                    }
                    else
                    {
                        <span class="index-column-name" type="text">@c.c</span>

                        @if (Index.IsCurrent)
                        {
                            <ContentEditable Class="index-column-value outline-none" Focus="@first" IsActive="@Index.IsCurrent" @bind-Value="@SearchValues[c.c]" />
                        }
                    }
                </span>
            }
        </div>
    </fieldset>

    @if (Index.IsCurrent)
    {
        <div class="validation-area">
            @if (!Vm.LastResult.IsValidationOk)
            {
                <div class="validation-display">
                    @foreach (var c in Vm.LastResult.ValidatedColumns.Where(c => !c.IsOk))
                    {
                        <div>
                            @c.Error
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="more-search-options-button" @onclick="ShowSearchOptions">
                    › search options
                </div>
            }
        </div>
    }
</a>

@code {
    [CascadingParameter]
    public QueryContext Context { get; set; }

    [Parameter]
    public LocationQueryVm Vm { get; set; }

    [Parameter]
    public IndexVm Index { get; set; }

    [Parameter]
    public Int32 HiddenPrefixLength { get; set; }

    [Parameter]
    public IMap<String, String> SearchValues { get; set; }

    [Parameter]
    public Action ShowSearchOptions { get; set; }

    String Url => Index.IsCurrent ? null : Context.RenderIndexUrl(Index.Index, Vm.Result.Entity.ColumnValues);

    void HandleClick()
    {
        if (Index.IsCurrent) return;

        Nav.NavigateTo(Url, replace: true);
    }
}
