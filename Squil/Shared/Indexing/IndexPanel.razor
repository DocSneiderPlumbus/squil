@using System.Diagnostics

<div class="@ClassNames("text-muted", "search-panel", "show".If(showSearchOptions))">
    <button type="button" class="close w-100 float-none text-right search-panel-close-button" @onclick="@HideSearchOptions" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>

    <h5 class="font-weight-bold border-bottom mb-4">Search</h5>

    <div class="indexes-form mb-4">
        @if (Vm.SearchOptions.Length > 0)
        {
            foreach (var option in Vm.SearchOptions)
            {
                if (!option.Index.IsSupported) continue;

                <IndexLine Vm="@Vm" Index="@option" HiddenPrefixLength="@Vm.KeyValuesCount" SearchValues="@SearchValues" ShowSearchOptions="@ShowSearchOptions" />
            }
        }
        else if (Vm.ScanOption?.IsCurrent ?? false == false)
        {
            <IndexLine Vm="@Vm" Index="@Vm.NoIndex" SearchValues="@SearchValues" ShowSearchOptions="@ShowSearchOptions" />
        }
    </div>

    @if (Vm.SearchOptions.Length == 0)
    {
        <p class="text-muted">There are no suitable indexes to search by.</p>
    }

    <div class="text-muted">
        <UnsupportedIndexesPanel Indexes="@Vm.UnsuitableIndexes" />
    </div>

    <div class="indexes-form">
        @if (Vm.ScanOption != null)
        {
            <IndexLine Vm="@Vm" Index="@Vm.ScanOption" SearchValues="@SearchValues" ShowSearchOptions="@ShowSearchOptions" />
        }
    </div>
</div>

@code {
    Boolean showSearchOptions;

    Action ShowSearchOptions => () => showSearchOptions = true;
    Action HideSearchOptions => () => showSearchOptions = false;

    [CascadingParameter]
    public QueryContext QueryContext { get; set; }

    [Parameter]
    public LocationQueryVm Vm { get; set; }

    [Parameter]
    public IMap<String, String> SearchValues { get; set; }
}
