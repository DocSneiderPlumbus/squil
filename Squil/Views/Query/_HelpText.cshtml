@model QueryControllerQueryType
@using Squil.Controllers;

<div class="mt-5"></div>

@switch (Model)
{
    case QueryControllerQueryType.Root:
        <h6>The root</h6>
        <p>
            At the root of the database, you see a list of tables with
            a few of their rows loaded - but presented as cards side-by-side.
            Some of those "rows" will have further related data already
            loaded for better orientation.
        </p>
        <p>
            How much data is loaded is done entirely heuristically - SQuiL has
            no special logic or configuration to cater to a specific
            database schema. It simply recurses all table relationships and takes an
            educated guess at what and how much data would be appropriate.
        </p>
        <p>
            Likewise, the names for the rows are derived from a suitable column, and
            the two-letter code that precedes the name (the "tag") is derived from
            the table name. These are not hard-coded to the specific schema
            you're looking at.
        </p>
        <p>
            That's what makes SQuiL great: As long as your database schema is
            well-designed, a semi-decent UI just drops off without any further work.
        </p>
        <p>
            Try navigating to a specific row by clicking on a tag or name.
        </p>
        break;
    case QueryControllerQueryType.Single:
        <h6>A row detail</h6>
        <p>
            Detail views are divided into sections. All the information in the
            data section comes from columns in the selected row. The other
            sections display data from other, related rows.
        </p>
        <p>
            Related data can be related in a to-one or a to-many fashion. Captions
            of data related in a to-many fashion link to a list view showing a
            filtered view of the table.
        </p>
        <p>
            Try moving around until you find a non-empty to-many entry and click on
            the label to get to the link. You can move back to the root by clicking
            on the database name in the header.
        </p>
        break;
    case QueryControllerQueryType.Table:
        <h6>A table list</h6>
        <p>
            Lists show table rows with slightly less information than detail views,
            therefore not requiring section labels.
        </p>
        <p>
            This list shows the beginning of an <em>entire table</em>.
        </p>
        break;
    case QueryControllerQueryType.Sublist:
        <h6>A related list</h6>
        <p>
            Lists show table rows with slightly less information than detail views,
            therefore not requiring section labels.
        </p>
        <p>
            This list <em>is filtered</em> to show only data related to a row from
            which you arrived here.
        </p>
        <p>
            In the future, there should be breadcrumbs to help get a more intuitive
            idea of what you're looking at in this view.
        </p>
        break;
}
