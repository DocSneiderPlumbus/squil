@page "/query/{connectionName}/{table?}/{index?}"
@using System.Web
@inject LocationQueryRunner Runner
@inject NavigationManager NavigationManager

<PageTitle>@Result.RootName</PageTitle>

<DefaultLayout>
    <NavItems>
        <li class="nav-item"><a class="nav-link text-muted" href="@Result.RootUrl">@Result.RootName</a></li>
    </NavItems>

    <ActionItems>
        <button class="btn btn-light text-muted" @onclick="OpenSqlModal"><strong>SQL</strong></button>
    </ActionItems>

    <ChildContent>
        <div class="row small text-muted d-xl-none">
            <div class="col-lg-12">
                <p><i class="fa fa-exclamation-triangle"></i> Note that there are some explanatory texts on larger screens.</p>
            </div>
        </div>

        <div class="row">
            <div class="entity-context col-12 col-xl-10">
                <CascadingValue Value="QueryContext">
                    <EntityContentView Entity="Result.Entity" />
                </CascadingValue>

                @*<pre class="debug-xml-original">
            @Model.Html
            </pre>*@

            </div>

            <div class="d-none d-xl-block col-xl-2 small text-muted">
                <HelpText QueryType="@Result.QueryType" />
            </div>
        </div>

        <Modal OnClose="SqlModalSubscription">
            <Title>SQL Query</Title>
            <HeaderExtra>
                <small>
                    <p class="mt-2 mr-4">
                        Each page's data is requested in only one query. The query is textually long, but
                        executes efficiently as it relies only on a series of nested table seeks. (This isn't
                        quite guaranteed yet, but a future version of SQuiL will make sure that it is.)
                    </p>
                    <p>
                        Although this query uses the nonstandard XML query syntax of SQL Server, a similar
                        query can be created for other database engines - although this may look even more
                        convoluted for those.
                    </p>

                </small>
            </HeaderExtra>
            <Body>
                <pre>
                    @Result.Sql
                </pre>
            </Body>
        </Modal>
    </ChildContent>
</DefaultLayout>

@code {

    [Parameter]
    public String ConnectionName { get; set; }

    [Parameter]
    public String Table { get; set; }

    [Parameter]
    public String Index { get; set; }

    LocationQueryResult Result { get; set; }

    QueryContext QueryContext { get; set; }

    void OpenSqlModal() => SqlModalSubscription = () => SqlModalSubscription = null;

    Action SqlModalSubscription { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        var query = new Uri(NavigationManager.Uri).Query;

        var queryParams = HttpUtility.ParseQueryString(query);

        Result = Runner.Query(ConnectionName, Table, Index, queryParams);

        QueryContext = new QueryContext(rest => $"/query/{ConnectionName}/{rest}");
    }
}
