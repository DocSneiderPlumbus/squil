@page "/ui/{*Path}"
@using Microsoft.Data.SqlClient
@inject LocationQueryRunner Runner
@inject NavigationManager NavigationManager
@inject IOptions<AppSettings> Options
@inject IJSRuntime Js
@inject CircuitState Cs
@implements IDisposable

@{
    var isFirstRender = renderCount == 0;

    renderCount++;

    var sd = Runner.CurrentConnectionHolder.StallDetective;

    var settings = Options.Value;
}

<PageTitle>@Vm.Response?.RootName</PageTitle>

<DefaultLayout>
    <BreadcrumbActionItems>
        <div class="">
            @if (Vm.CanDelete == true)
            {
                <button @onclick="Vm.StartDelete" disabled="@Vm.AreInEdit" class="ms-2 btn btn-sm btn-outline-dark text-muted-unimportant"><i class="fas fa-trash" /></button>
            }
            @if (Vm.CanInsert == true)
            {
                <button @onclick="HandleInsertClick" disabled="@Vm.AreInEdit" class="ms-2 btn btn-sm btn-outline-dark text-muted-unimportant"><i class="fas fa-plus" /></button>
            }
            @if (Vm.CanEdit == true)
            {
                <button @onclick="Vm.StartUpdate" disabled="@Vm.AreInEdit" class="ms-2 btn btn-sm btn-outline-dark text-muted-unimportant"><i class="fas fa-pen" /></button>
            }
        </div>
    </BreadcrumbActionItems>
    <NavItems>
        <BreadcrumbItem><a class="text-muted" href="/">Databases</a></BreadcrumbItem>

        @if (Vm.CommittedResult is LocationQueryResult bcr)
        {
            <BreadcrumbItem><a class="text-muted" href="@Vm.Response.RootUrl.If(Vm.Response.QueryType != QueryControllerQueryType.Root)">@Vm.Response.RootName</a></BreadcrumbItem>
            <CascadingValue Value="Vm">
                @if (bcr.PrincipalEntities != null)
                {
                    var entity = bcr.PrincipalEntities.List.Single("Unexpectedly not having a unique principal");

                    <BreadcrumbItem>
                        <span class="entity-context text-muted">
                            <EntityHeaderView Table="@Vm.Response.PrincipalRelation.OtherEnd.Table" Entity="@entity" />
                        </span>
                    </BreadcrumbItem>
                    <BreadcrumbItem>
                        <span class="text-muted"><EntityRelationNameView RelationEnd="@Vm.Response.PrincipalRelation" NoColumnInformation="@true" /></span>
                    </BreadcrumbItem>
                }
                else if (bcr.PrimaryEntities is RelatedEntities pe)
                {
                    var entity = pe.List.FirstOrDefault();

                    switch (Vm.Response.QueryType)
                    {
                        case QueryControllerQueryType.Table:
                            <span class="entity-context text-muted"><EntityRelationNameView RelationEnd="@pe.RelationEnd" NoColumnInformation="@true" /></span>
                            break;
                        case QueryControllerQueryType.Row:

                            <BreadcrumbItem>
                                <a class="entity-context text-muted" href="@Vm.UrlCreateor.RenderTableUrl(Vm.Response.Table)"><EntityRelationNameView RelationEnd="@pe.RelationEnd" NoColumnInformation="@true" /></a>
                            </BreadcrumbItem>

                            <BreadcrumbItem>
                                <span class="text-muted entity-context">
                                    <EntityHeaderView Table="@pe.RelationEnd.Table" Entity="@entity" ShowLink="@false" />
                                </span>
                            </BreadcrumbItem>
                            break;
                        case QueryControllerQueryType.Column:
                            <BreadcrumbItem>
                                <a class="entity-context text-muted" href="@Vm.UrlCreateor.RenderTableUrl(Vm.Response.Table)"><EntityRelationNameView RelationEnd="@pe.RelationEnd" NoColumnInformation="@true" /></a>
                            </BreadcrumbItem>

                            <BreadcrumbItem>
                                <a class="text-muted entity-context" href="@Vm.UrlCreateor.RenderEntityUrl(Vm.Response.Table, entity)">
                                    <EntityHeaderView Table="@pe.RelationEnd.Table" Entity="@entity" ShowLink="@false" />
                                </a>
                            </BreadcrumbItem>

                            <BreadcrumbItem>
                                <span>@Vm.Location.Column</span>
                            </BreadcrumbItem>
                            break;
                        case QueryControllerQueryType.TableSlice:
                            @* Should have been handled above by having a principal entity *@
                            <i>some slice</i>
                            break;
                        case QueryControllerQueryType.Root:
                        default:
                            break;
                    }
                }

            </CascadingValue>
        }
    </NavItems>

    <ActionItems>
        @if (settings.EnablePrimaryIdSqlCopy)
        {
            <PrimaryIdSqlCopyButton Response="@Vm.CurrentResponse" />            
        }
        <div class="btn-group">
            @if (Settings.EnableDevMode)
            {
                <a class="btn btn-outline-dark text-muted" href="/info/@Vm.Location.Source">schema</a>
                <button class="btn btn-outline-dark text-muted" @onclick="OpenReportModal">report</button>
            }
            <button class="btn btn-outline-dark text-muted" @onclick="OpenSqlModal"><strong>SQL</strong></button>
        </div>
    </ActionItems>

    <ChildContent>

        <CascadingValue Value="Vm">

            <SidebarLayout>
                <RightContent>
                    <div class="common-lead-spacer">&nbsp;</div>

                    @if (Vm.AreInEdit == true)
                    {
                        <h5 class="text-muted font-weight-bold border-bottom mb-4">Edit</h5>

                        <div class="sidebar-helptext small text-muted mb-4">
                            <EditHelpText />
                        </div>

                        <div class="d-flex gap-2 flex-wrap mb-4 sidebar-helptext">
                            <button @onclick="Vm.CancelEdit" class="btn btn-outline-dark flex-1 text-nowrap"><i class="fas fa-times me-2" />Cancel</button>
                            @if (vm.AreInUpdateOrInsert)
                            {
                                <button @onclick="Vm.RunDry" class="btn btn-outline-dark flex-1 text-nowrap"><i class="fas fa-times me-2" />Validate</button>
                            }
                            <button @onclick="Vm.Save" class="btn btn-primary flex-1 text-nowrap"><i class="fas fa-check me-2" />Save</button>
                        </div>
                    }
                    else if (Settings.EnableDevMode)
                    {
                        if (Vm.CurrentResponse?.Ledger != null)
                        {
                            <div>
                                <span>@queryCount / @renderCount</span>
                            </div>
                            <div class="common-lead-spacer">&nbsp;</div>
                            <div class="">
                                <dl>
                                    @foreach (var entry in Vm.CurrentResponse.Ledger.GetEntries())
                                    {
                                        <dt>@entry.name</dt>
                                        <dd>@entry.time</dd>
                                    }
                                </dl>
                            </div>
                        }
                    }
                    else if (Vm.HaveResponse)
                    {
                        <h5 class="text-muted font-weight-bold border-bottom mb-4">Guidance</h5>
                        <div class="sidebar-helptext small text-muted">
                            <HelpText QueryType="@Vm.CurrentResponse.QueryType" />
                        </div>
                    }
                </RightContent>

                <LeftContent>
                    @if (Vm.SearchOptions is not null)
                    {
                        <div class="common-lead-spacer">&nbsp;</div>
                        <SearchPanel SearchValues="SearchValues" />
                    }
                </LeftContent>

                <ChildContent>

                    <div class="common-lead-spacer">&nbsp;</div>

                    @if (Vm.CurrentSource?.State == LiveSourceState.Building)
                    {
                        // All other states should lead to a quick error display
                        <div class="alert alert-info">
                            Building model for database schema. <span class="spinner-border spinner-border-sm"></span>
                        </div>
                    }
                    else if (Vm.HaveResponse)
                    {
                        switch (Vm.Response.QueryType)
                        {
                            case QueryControllerQueryType.Table:
                            case QueryControllerQueryType.TableSlice:
                                <div class="search-panel-spacer">&nbsp;</div>
                                break;
                        }

                        <div class="@ClassNames("query-results", "querying".If(Vm.IsQuerying && sd != null))">

                            @if (Settings.ShowHelpTexts)
                            {
                                <p class="d-block d-lg-none"><i class="fa fa-exclamation-triangle"></i> Note that there are some explanatory texts on larger screens.</p>
                            }

                            @if (Vm.CurrentResponse.Exception is SqlException se)
                            {
                                <SqlErrorView AlertClass="alert alert-danger" Exception="@se" />
                            }
                            else if (Vm.CurrentResponse.Exception is OperationCanceledException)
                            {
                                // canceled
                            }
                            else if (Vm.CurrentResponse.Exception is SchemaChangedException)
                            {
                                if (showSchemaChangedException)
                                {
                                    <div class="alert alert-danger">
                                        <div>
                                            A schema change occured and the attempt to rebuild the model has failed.
                                        </div>
                                    </div>                                    
                                }
                            }
                            else if (Vm.CurrentResponse.Exception is Exception e)
                            {
                                <div class="alert alert-danger">
                                    <div>
                                        An internal exception occurred on during this query, this is likely a bug.
                                    </div>
                                </div>
                            }
                            else if (Vm.CurrentResponse.ChangeException is SqlException cse)
                            {
                                <SqlErrorView AlertClass="alert alert-warning" Exception="@cse" />
                            }

                            @if (Vm.Result != null)
                            {
                                <div class="@ClassNames("entity-context", "entity-invalid".If(!Vm.CurrentResponse.IsOk))">
                                    <EntityContentView Entity="@Vm.Result.Entity" HideHeaders="@(Vm.CurrentResponse.QueryType != QueryControllerQueryType.Root)" />
                                </div>

                                @switch (Vm.CanLoadMore())
                                {
                                    case CanLoadMoreStatus.Can:
                                        if (Vm.Request.ListLimit < Settings.LoadMoreLimit)
                                        {
                                            <div class="my-4">
                                                <em class="btn">...and more</em> <button class="btn btn-light" @onclick="Vm.LoadMore">load <span>@Settings.LoadMoreLimit</span> at once</button>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="my-4">
                                                <em class="btn">...and more (maximum load size reached)</em>
                                            </div>
                                        }
                                        break;
                                    case CanLoadMoreStatus.Complete:
                                    case CanLoadMoreStatus.Unavailable:
                                    default:
                                        break;
                                }

                                <div class="common-lead-spacer">&nbsp;</div>
                            }
                        </div>

                        <Modal OnClose="SqlModalSubscription">
                            <Title>SQL Query</Title>
                            <HeaderExtra>
                                <small>
                                    <p class="mt-2 me-4">
                                        Each page's data is requested in only one query. The query is textually long, but
                                        executes efficiently as it relies only on a series of nested table seeks.
                                        This is guaranteed unless you use the scanning search or you hit a bug.
                                    </p>
                                    <p>
                                        Although this query uses the nonstandard XML query syntax of SQL Server, a similar
                                        query can be created for most other database engines. However, these may look even more
                                        convoluted then.
                                    </p>

                                </small>
                            </HeaderExtra>
                            <Body>
                                @foreach (var change in Vm.CurrentResponse?.Ledger?.GetEntries<ChangeSql>())
                                {
                                    <pre><CopyableContent>@change.Sql</CopyableContent></pre>
                                }
                                <pre><CopyableContent>@(Vm.CurrentResponse?.Ledger?.GetLastEntry<QuerySql>()?.Sql)</CopyableContent></pre>
                                </Body>
                            </Modal>

                        <Modal OnClose="ReportModalSubscription">
                            <Title>Query report</Title>
                            <Body>
                                @foreach (var entry in Vm.CurrentResponse.Ledger?.GetEntries())
                                {
                                    var result = entry.result.GetReportString();

                                    <h5>@entry.name<br /><small>@entry.time</small></h5>
                                    @if (result is String s)
                                    {
                                        <pre>
                                        <CopyableContent>@s</CopyableContent>
                                                </pre>
                                    }
                                }
                            </Body>
                        </Modal>
                    }

                    <div class="@ClassNames("query-delay-overlay", "querying".If(Vm.IsQuerying && sd != null))">
                        <div class="common-lead-spacer">&nbsp;</div>
                        <h2>Investigating slow query</h2>

                        <RerenderHelper Observable="@Runner.CurrentConnectionHolder" OnChange="@StateHasChanged" />

                        @if (sd != null)
                        {
                            <RerenderHelper Observable="@sd" OnChange="@StateHasChanged" />

                            <div class="text-muted">
                                <small>Session ID: @sd.Result.SessionId</small>
                            </div>

                            @if(sd.Result.headBlockerSessionId is Int32 blockerSessionId)
                            {
                                <div class="text-muted">
                                    <small>Blocking session ID: @blockerSessionId</small>
                                </div>                                
                            }

                            <div>
                                @switch (sd.Result.Type)
                                {
                                    case StallInvestigationResultType.Initial:
                                        break;
                                    case StallInvestigationResultType.CantConnect:
                                        <p>
                                            The server has become unreachable.
                                        </p>
                                        break;
                                    case StallInvestigationResultType.NoInformation:
                                        <p>
                                            The server is reachable, but even though this connection has the required permission,
                                            no further information about the stalled query could be retrieved.
                                        </p>
                                        break;
                                    case StallInvestigationResultType.NoPermission:
                                        <p>
                                            The server is reachable, but this connection doesn't have the necessary
                                            VIEW SERVER STATE permission required for further stall investigation.
                                        </p>
                                        break;
                                    case StallInvestigationResultType.Blocked:
                                        <p>
                                            The query is blocked waiting on a locked resource. It will continue as soon as
                                            the lock is released.
                                        </p>
                                        break;
                                    case StallInvestigationResultType.Unblocked:
                                        <p>
                                            Query status could be retrieved and it is not reported to be blocked.
                                            The following spinner will move every second the database makes some
                                            progress on this query. If it doesn't move, then the query is blocked in
                                            some unreported way.
                                        </p>
                                        <i class="fas fa-spinner" style="transform: rotate(@((sd.Result.progress % 8) * 45)deg)"></i>
                                        break;
                                }
                            </div>
                        }
                    </div>

                </ChildContent>
            </SidebarLayout>
        </CascadingValue>
    </ChildContent>
</DefaultLayout>

<RerenderHelper Observable="@Vm" OnChange="@StateHasChanged" />

<RerenderHelper Observable="@SearchValues.Backing" OnChange="@HandleSeekValuesChanged" />

@code {
    static Logger log = LogManager.GetCurrentClassLogger();

    static Int32 staticInstanceId = 0;

    Int32 instanceId = (staticInstanceId++ % 10);

    [Parameter]
    public String Path { get; set; }

    [CascadingParameter]
    public CurrentLocation Location { get; set; }

    CurrentLocation previousLocation;

    AppSettings Settings => Options.Value;

    Int32 renderCount, queryCount;

    Boolean showSchemaChangedException;

    IMap<String, String> SearchValues => Cs.SearchValuesByLocation[Location.Location];

    Boolean jsInitPending;
    Boolean isDisposed;

    IDisposable vmEventSubscription;

    LocationQueryVm vm = null;

    LocationQueryVm Vm
    {
        get => vm;
        set
        {
            if (vm is not null)
            {
                vmEventSubscription.Dispose();
                vm.Dispose();
            }

            vm = value;

            if (vm is not null)
            {
                vmEventSubscription = vm.Events.Subscribe(ProcessVmEvent);
            }
        }
    }

    void ProcessVmEvent(QueryVmEvent e)
    {
        if (e is QueryVmStartQueryEvent)
        {
            Vm.StartQuery();
        }
        else if (e is QueryVmNavigateBackEvent)
        {
            Js.InvokeVoidAsync("history.back");
        }
        else if (e is QueryVmNavigateToEvent nte)
        {
            NavigationManager.NavigateTo(nte.Target, new NavigationOptions { ReplaceHistoryEntry = true});
        }
        else if (e is QueryVmExceptionEvent ee)
        {
            HandleException(ee.Exception);
        }
        else
        {
            throw new Exception($"Unknown event {e.GetType().Name}");
        }
    }

    void OpenSqlModal() => SqlModalSubscription = () => SqlModalSubscription = null;

    Action SqlModalSubscription { get; set; }

    void OpenReportModal() => ReportModalSubscription = () => ReportModalSubscription = null;

    Action ReportModalSubscription { get; set; }

    Boolean CheckLocationUri(out Uri uri)
    {
        uri = null;

        if (String.IsNullOrEmpty(Location?.Location)) return true;

        uri = new Uri(Location.Location, UriKind.Absolute);

        return uri.Segments.Length < 2 || uri.Segments[0] != "/" || uri.Segments[1] != "ui/";
    }

    void HandleException(Exception ex)
    {
        static Boolean ShouldLogExceptionToBrowser(Exception ex) => ex switch
        {
            null => false,
            SqlException => false,
            OperationCanceledException => false,
            SchemaChangedException => false,
            _ => true
        };

        if (ShouldLogExceptionToBrowser(Vm.CurrentResponse.Exception))
        {
            Js.InvokeVoidAsync("console.log", Vm.CurrentResponse.Exception.ToString()).Ignore();
        }
    }

    void HandleSeekValuesChanged()
    {
        Vm.SetSearchValues(SearchValues.ToNameValueCollection());

        Vm.StartQuery();
    }

    void HandleInsertClick()
    {
        var table = Vm.CurrentResponse.Table;

        // Inserting a related entity has an index and will use the key values currently in the location
        var index = Vm.CurrentResponse.Index;

        if (table.PrimaryKey == null) throw new Exception($"Cant insert into table without primary key");

        var keys = Vm.Location.KeyParams.AsMap();

        var url = Vm.UrlCreateor.RenderEntityUrl(table.PrimaryKey, index, keys, operationType: LocationQueryOperationType.Insert);

        NavigationManager.NavigateTo(url);
    }

    protected override void OnParametersSet()
    {
        if (Location != previousLocation)
        {
            log.Debug($"OnParametersSet uri changed from {previousLocation?.Location ?? "null"} to {Location.Location}");

            previousLocation = Location;

            SetNewVmOnLocationChange();
        }

        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(Boolean firstRender)
    {
        if (jsInitPending)
        {
            // currently unused

            jsInitPending = false;

            log.Debug($"init boostrap content after render");

            await Js.InvokeVoidAsync("initBootstrapContent");
        }
    }

    void SetNewVmOnLocationChange()
    {
        if (CheckLocationUri(out var uri))
        {
            log.Info("Query page left, won't run a query");

            return;
        }

        var segments = uri.Segments.Skip(1).ToArray();

        var queryParams = HttpUtility.ParseQueryString(uri.Query);

        var location = new LocationQueryLocation(segments, queryParams);

        Vm = new LocationQueryVm(Settings, Runner, location);

        Vm.SetSearchValues(SearchValues.ToNameValueCollection());

        Vm.StartQuery();

        Vm.InDebug = queryParams["debug"] != null;
    }

    void IDisposable.Dispose()
    {
        log.Info($"Disposing ui page");

        Vm = null;

        isDisposed = true;
        Runner.Cancel();
    }

    new void StateHasChanged()
    {
        if (isDisposed) return;

        base.StateHasChanged();
    }
}
