@page "/"
@inject LiveConfiguration configuration
@inject IOptions<AppSettings> Options

@{
    var usePs = Options.Value.UseProminentSources;


}

<PageTitle>Select database</PageTitle>

<DefaultLayout>
    <div class="container mt-4">
        @if (Options.Value.UseProminentSources)
        {
            <div class="display-4 mt-4 mb-4">Welcome,</div>

            @if (Options.Value.ShowDemoText)
            {
                <p>this is the demo hosting of the SQuiL prototype: a generic UI for relational databases.</p>

                <p>
                    If you click on a choice of datasource below, you will be able to browse that database with something that
                    looks like a custom user interface - but there's nothing custom about it: Everything is derived
                    from the database schema itself by using foreign key information and sensible heuristics.
                </p>

                <p>
                    Most sample databases are so small that scanning will be the default search option. Only
                    the StackOverflow sample is quite large (about 20GB) so that indexed search can shine over scanning.
                </p>
            }
            else
            {
                <p>Please select one of the connected data sources.</p>
            }

            <div class="row mt-5">
                @foreach (var c in configuration.GetProminentSourceConfigurations())
                {
                    var hasLinks = c.DescriptionSnippetType is String;

                    <div class="col-12 col-lg-6 py-3">
                        <div class="card bg-light">
                            <div class="card-header">
                                @c.Name
                            </div>
                            <div class="card-body">
                                <h5>@(c.LongName ?? c.Name)</h5>
                                @if (c.DescriptionSnippetType is String ts)
                                {
                                    <DynamicComponent Type="@DescriptionSnippetTypeRegistry.Instance.Get(ts)" />
                                }
                                else if (c.Description is String d)
                                {
                                    <p>@d</p>
                                }
                                <a href="/query/@c.Name" class="btn btn-outline-dark float-end @ClassNames("stretched-link".If(!hasLinks))">🞂 enter</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="row">
                <div class="offset-3 col-6">
                    <div class="position-relative">
                        <div class="h4 mb-4">Configured hosts and catalogs</div>

                        <SqlServerSources />
                    </div>
                </div>
            </div>
        }

        <div class="common-lead-spacer">&nbsp;</div>
    </div>
</DefaultLayout>

@code {
}