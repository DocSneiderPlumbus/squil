@page "/"
@inject LiveConfiguration configuration
@inject IOptions<AppSettings> Options

<PageTitle>Select database</PageTitle>

<DefaultLayout>
    <div class="container">
        <h1 class="display-4 mt-4 mb-4">Welcome,</h1>

        @if (Options.Value.ShowDemoText)
        {
            <p>this is the demo hosting of the SQuiL prototype: a generic UI for relational databases.</p>

            <p>
                If you click on a choice of datasource below, you will be able to browse that database with something that
                looks like a custom user interface - but there's nothing custom about it: Everything is derived
                from the database schema itself by using foreign key information and sensible heuristics.
            </p>

            <p>
                Most sample databases are so small that scanning will be the default search option. Only
                the StackOverflow sample is quite large (about 20GB) so that indexed search can shine over scanning.
            </p>
        }
        else
        {
            <p>Please select one of the connected data sources.</p>
        }

        <div class="row mt-5">
            @foreach (var c in configuration.GetConnnectionConfigurations())
            {
                var hasLinks = c.DescriptionSnippetType is String;

                <div class="col-12 col-lg-6 py-3">
                    <div class="card bg-light">
                        <div class="card-header">
                            @c.Name
                        </div>
                        <div class="card-body">
                            <h5>@(c.LongName ?? c.Name)</h5>
                            @if (c.DescriptionSnippetType is String ts)
                            {
                                <DynamicComponent Type="@DescriptionSnippetTypeRegistry.Instance.Get(ts)" />
                            }
                            else if (c.Description is String d)
                            {
                                <p>@d</p>
                            }
                            <a href="/query/@c.Name" class="btn btn-outline-dark float-right @ClassNames("stretched-link".If(!hasLinks))">🞂 enter</a>
                        </div>
                    </div>
                </div>
            }

            <button class="btn" @onclick="@(() => EditModalSubscription(null))">add new</button>
        </div>

        <ServerModal OnClose="editModalSubscription">
            <Title>Add connection</Title>
            <Body>
                <EditForm Model="@editee" OnValidSubmit="@HandleEditSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="name">Name</label>
                        <InputText class="form-control" id="name" @bind-Value="editee.Name" />
                    </div>
                    <div class="form-group">
                        <label for="name">Long name</label>
                    <InputText class="form-control" id="long-name" @bind-Value="editee.LongName" />
                    </div>
                    <div class="form-group">
                        <label for="name">Connection string</label>
                        <InputText class="form-control" id="connection-string" @bind-Value="editee.ConnectionString" />
                    </div>

                    <button class="btn btn-primary float-right" type="submit">Submit</button>
                </EditForm>
            </Body>
        </ServerModal>

    </div>
</DefaultLayout>

@code {
    Action editModalSubscription;

    ConnectionConfiguration editee;

    void EditModalSubscription(ConnectionConfiguration editee)
    {
        this.editee = editee ?? new ConnectionConfiguration { Name = "new-connection" };

        editModalSubscription = () => editModalSubscription = null;
    }

    void HandleEditSubmit()
    {
        configuration.AddConnection(editee);
    }
}