@using System.Diagnostics
@inject IJSRuntime Js

<div @ref="ModalReference" @onhiddenbsmodal="HandleClose" class="blazor-modal modal" tabindex="-1" role="dialog">
    @if (OnClose != null)
    {
        @ChildContent
    }
</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public Action OnClose { get; set; }

    ElementReference ModalReference { get; set; }

    Boolean isOpen;
    Boolean isChangePending;

    void HandleClose(HiddenBsModalEventArgs a)
    {
        // This helps in case the following callback doesn't trigger a parameter set,
        // which ideally it always should - and does when using the ModalModel
        isOpen = false;

        OnClose?.Invoke();
    }

    protected override void OnParametersSet()
    {
        var shouldBeOpen = OnClose != null;

        if (shouldBeOpen != isOpen)
        {
            isChangePending = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Bootstrap's modal events don't bubble and Blazor can handle only those that do,
            // so we need to translate the event.
            await Js.InvokeVoidAsync("translateEvent", ModalReference, "hidden.bs.modal", "hiddenbsmodal");
        }

        if (isChangePending)
        {
            isChangePending = false;

            await Js.InvokeVoidAsync("callBoostrapModal", ModalReference, isOpen = OnClose != null);
        }
    }
}
