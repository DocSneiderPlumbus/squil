@inject IJSRuntime Js

<span @ref="element" class="@Class" contenteditable="@IsEditable" @onclick:stopPropagation @onfocus="Focused" @onblur="HandleChange">@Value</span>

@code {
    static Logger log = LogManager.GetCurrentClassLogger();

    [Parameter]
    public String Name { get; set; }

    [Parameter]
    public String Class { get; set; }

    [Parameter]
    public Boolean IsEditable { get; set; }

    [Parameter]
    public String Value { get; set; }

    [Parameter]
    public Boolean AutoFocus { get; set; }

    [Parameter]
    public EventCallback<String> ValueChanged { get; set; }

    [Parameter]
    public EventCallback Focused { get; set; }


    ElementReference element;

    public ValueTask FocusAsync() => element.FocusAsync();

    protected override bool ShouldRender() => false;

    protected override void OnParametersSet()
    {
        if (Name == "payload")
        {
            log.Info($"{Name} {Class} {IsEditable} {Value} {AutoFocus} {Focused}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && AutoFocus)
        {
            await FocusAsync();
        }
    }

    async Task HandleChange()
    {
        var innerTextFromElement = await Js.InvokeAsync<String>("getInnerText", element);

        var newValue = innerTextFromElement.Replace('\u00a0', ' ');

        await ValueChanged.InvokeAsync(newValue);
    }
}
