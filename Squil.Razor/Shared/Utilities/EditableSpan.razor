@inject IJSRuntime Js

<span @ref="element" class="@Class" style="display: block" contenteditable="@IsEditable" @onclick:stopPropagation @onfocus="Focused" @onblur="HandleChange">@Value</span>

@code {
    static Logger log = LogManager.GetCurrentClassLogger();

    [Parameter]
    public String Class { get; set; }

    [Parameter]
    public Boolean IsEditable { get; set; }

    [Parameter]
    public String Value { get; set; }

    [Parameter]
    public Boolean Focus { get; set; }

    [Parameter]
    public EventCallback<String> ValueChanged { get; set; }

    [Parameter]
    public EventCallback Focused { get; set; }


    ElementReference element;

    public ValueTask FocusAsync() => element.FocusAsync();

    async Task HandleChange()
    {
        var innerTextFromElement = await Js.InvokeAsync<String>("getInnerText", element);

        var newValue = innerTextFromElement.Replace('\u00a0', ' ');

        await ValueChanged.InvokeAsync(newValue);
    }
}
