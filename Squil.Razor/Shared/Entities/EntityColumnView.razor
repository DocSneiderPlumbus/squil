@{
    var areQueryEditing = QueryVm.AreInUpdateOrInsert;

    var url = Url.If(!areQueryEditing);

    var showEditValues = !QueryVm.CurrentResponse.IsChangeOk || Entity.EditState == EntityEditState.Modified;
}

<div class="@ClassNames("entity-column", "entity-column-editing".If(IsEditing), "entity-column-editable".If(CanEdit), "entity-column-focus-column".If(IsFocusColumn))" data-x-name="@Column.Name" data-css-type="@Column.Type.CssType" data-string-length-class="@Cls.GetCssClass()" data-is-focus-column=@IsFocusColumn>
    <label>
        <a href="@url">
            @Column.Name
@*          Doesn't work - the hovering is blocked by the outer style change on hover  
            @if (Column.Comment != null)
            {
                <span data-toggle="tooltip" title="@Column.Comment">
                    &nbsp;
                    <span class="fa fa-xs fa-info" />
                </span>
            }
*@        </a>
    </label>
    <div class="entity-column-wrapper">
        <div class="entity-column-content" @onclick="HandleClick">
            <div @key="Entity.Version.ToString()">
                @{
                    var value = Entity.GetDisplayValue(Column.Name, IsEditing || showEditValues);

                    log.Info($"#{QueryVm.ResultNumber} values is {value}");

                    var pending = false;

                    if (!IsEditing)
                    {
                        if (value == null)
                        {
                            <span class="null-value" />
                        }
                        else if (value.Length == 0)
                        {
                            <span class="empty-value" />
                        }
                        else if (String.IsNullOrWhiteSpace(value))
                        {
                            <span class="ws-value" />
                        }
                        else
                        {
                            pending = true;
                        }
                    }
                    else
                    {
                        pending = true;
                    }

                    if (!pending)
                    {
                        // done
                    }
                    else if (IsFocusColumn)
                    {
                        if (IsEditing)
                        {
                            <EntityColumnEditTextArea AutoFocus="true" Value="@value" ValueChanged="HandleValueChanged" />
                        }
                        else
                        {
                            <CopyableContent>@value</CopyableContent>
                        }
                    }
                    else
                    {
                        <EditableSpan @key="@CanEdit" Name="@Column.Name" Value="@value" AutoFocus="@IsEditing" Focused="@HandledFocused" ValueChanged="@HandleValueChanged" IsEditable="@CanEdit" />
                    }
                }
            </div>
        </div>

        @if (CanEdit && Column.IsNullable && !IsFocusColumn)
        {
            <button @onclick="HandleSetNullButtonClick" disabled="@(value == null)" class="entity-column-set-null-button"><i class="fa-xs fas fa-times" /></button>
        }
    </div>
</div>

@code {
    static Logger log = LogManager.GetCurrentClassLogger();

    [Parameter]
    public Entity Entity { get; set; }

    [Parameter]
    public CMTable Table { get; set; }

    [Parameter]
    public String Url { get; set; }

    [Parameter]
    public CMColumn Column { get; set; }

    [Parameter]
    public StringLengthClass Cls { get; set; }

    [Parameter]
    public Boolean IsFocusColumn { get; set; }

    [CascadingParameter]
    public LocationQueryVm QueryVm { get; set; }

    Boolean CanEdit => QueryVm.AreInUpdateOrInsert && Entity.EditState != EntityEditState.Closed && Column.Type.IsSupported;

    Boolean isEditing;

    Boolean IsEditing => QueryVm.AreInUpdateOrInsert && (isEditing || IsFocusColumn);

    void HandleSetNullButtonClick()
    {
        Entity.SetEditValue(Column.Name, null);

        QueryVm.AddChange(Entity);
    }

    void HandleValueChanged(String value)
    {
        if (!CanEdit)
        {
            log.Debug($"Illegitimate field edit ended and is ignored - this can happen when focusing a span while focused on another");

            return;
        }
        else
        {
            log.Debug($"Field edit ended");
        }

        isEditing = false;

        Entity.SetEditValue(Column.Name, value);

        QueryVm.AddChange(Entity);
    }

    void HandledFocused()
    {
        log.Debug($"Field edit started with focus");

        QueryVm.NoteEditTouch(Entity);

        isEditing = true;
    }

    void HandleClick()
    {
        if (!CanEdit) return;

        log.Debug($"Field edit started with click");

        QueryVm.NoteEditTouch(Entity);

        isEditing = true;
    }
}
