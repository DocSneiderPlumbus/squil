@inject LiveConfiguration configuration

@{
    var labelClass = "col-sm-3";
    var fieldClass = "col-sm-9";
}

<EditForm Model="@Model" OnValidSubmit="@HandleEditSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row align-items-baseline">
        <label class="@labelClass" for="name">Name</label>
        <div class="@fieldClass">
            <InputText class="form-control" id="name" @bind-Value="Model.Name" />
        </div>
    </div>

    <div class="form-group row align-items-baseline mt-4">
        <label class="@labelClass"  for="host">Host</label>
        <div class="@fieldClass">
            <InputText class="form-control form-control-sm" id="host" @bind-Value="Model.Host" />
        </div>
    </div>

    <div class="form-group row mt-4">
        <div class="@labelClass">Authentication</div>
        <div class="@fieldClass">
            <div class="form-check">
                <InputCheckbox class="form-check-input" id="use-windows-auth" @bind-Value="Model.UseWindowsAuthentication" />
                <label class="form-check-label" for="use-windows-auth">
                    Use Windows authentication
                </label>
            </div>
        </div>
    </div>

    <div class="form-group row align-items-baseline mb-2">
        <label class="@labelClass">User name</label>
        <div class="@fieldClass">
            <InputText class="form-control form-control-sm" @bind-Value="Model.User" disabled="@Model.UseWindowsAuthentication" />
        </div>
    </div>
    <div class="form-group row align-items-baseline">
        <label class="@labelClass" for="name">Password</label>
        <div class="@fieldClass">
            <InputText class="form-control form-control-sm" id="connection-string" type="password" @bind-Value="Model.Password" disabled="@Model.UseWindowsAuthentication" />
        </div>
    </div>

    <button class="btn btn-primary float-right" type="button" @onclick="RefreshCatalogs">Fetch catalogs</button>

    @if (liveHost?.Error is Exception exception)
    {
        <div class="alert alert-danger">
            @exception.Message
        </div>
    }

    @if (liveHost?.Catalogs is SqlConnectionExtensions.SqlCatalog[] catalogs)
    {
        @foreach (var catalog in catalogs)
        {
            if (catalog.IsSystemObject) continue;

            <div>
                <span class="@ClassNames("text-muted".If(!catalog.HasAccess))">@catalog.Name</span>
            </div>
        }
    }

    <button class="btn btn-primary float-right" type="submit">Submit</button>

</EditForm>

@code {
    [Parameter]
    public SqlServerHostConfiguration Model { get; set; }

    [Parameter]
    public EventCallback<SqlServerHostConfiguration> OnSubmit { get; set; }

    LiveSqlServerHost liveHost;

    async Task HandleEditSubmit()
    {
        await OnSubmit.InvokeAsync(Model);
    }

    async Task RefreshCatalogs()
    {
        liveHost = new LiveSqlServerHost(Model.Clone(), configuration.SqlServerConnectionProvider);
        await liveHost.Refresh();
    }
}
