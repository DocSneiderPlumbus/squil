@inject LiveConfiguration configuration
@inject IDbFactory Dbf

@{
    var hosts = configuration.LiveSqlServerHosts;
}

<button class="btn btn-outline-dark btn-sm position-absolute end-0 top-0" @onclick="AddHost">
    <i class="far fa-plus-circle me-2" />Add host
</button>

@if (hosts != null)
{
    <div class="list-group">
        @foreach (var host in hosts)
        {
            var h = host;

            <SqlServerHost @key="host.Id" Host="host" OnEdit="@(h => editHostModel.SetModel(h.Configuration.Clone()))" />
        }
    </div>
}

<EditSqlServerHostDialog ModalModel="@editHostModel" OnSaveClick="@SaveHost" OnDeleteClick="@DeleteHost">
    <ExtraValidation>
        <CustomValidation @ref="customValidation" />
    </ExtraValidation>
</EditSqlServerHostDialog>

@code {
    ModalModel<SqlServerHostConfiguration> editHostModel;

    CustomValidation customValidation;

    protected override void OnInitialized()
    {
        editHostModel = new ModalModel<SqlServerHostConfiguration>(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        await configuration.RefreshHosts(true);
    }

    void AddHost()
    {
        editHostModel.SetModel(new SqlServerHostConfiguration());
    }

    async Task SaveHost()
    {
        if (String.IsNullOrWhiteSpace(editHostModel.Model.Catalog))
        {
            editHostModel.Model.Catalog = null;
        }

        editHostModel.Model.ModifiedAt = DateTimeOffset.Now;

        await configuration.UpdateLiveHosts(async dbf =>
        {
            var db = await dbf.CreateDbContextAsync();

            await using var transaction = await db.Database.BeginTransactionAsync();

            await db.ReconcileAndSaveChangesAsync(editHostModel.Model, e => { });

            var count = await db.SqlServerHostConfigurations.CountAsync(h => h.Name == editHostModel.Model.Name);

            if (count > 1)
            {
                await transaction.RollbackAsync();

                customValidation.DisplayError("Name", "Name already exists");
            }
            else
            {
                await transaction.CommitAsync();

                editHostModel.Model = null;
            }
        });
    }

    async Task DeleteHost()
    {
        await configuration.UpdateLiveHosts(dbf => dbf.RemoveAsync(editHostModel.Model));

        editHostModel.Model = null;
    }
}
