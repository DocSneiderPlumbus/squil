@inject LiveConfiguration configuration
@inject IDbFactory Dbf

@{
    var hosts = configuration.LiveSqlServerHosts;
}

<button class="btn btn-outline-dark btn-sm position-absolute end-0 top-0" @onclick="AddHost">
    <i class="far fa-plus-circle me-2" />Add host
</button>

@if (hosts != null)
{
    <div class="list-group">
        @foreach (var host in hosts)
        {
            var h = host;

            <SqlServerHost @key="host.Id" Host="host" OnEdit="@(h => EditHost(h.Configuration))" />
        }
    </div>
}

<ServerModal OnClose="@editModalSubscription">
    <Title>@EditModalTitleVerb host connection</Title>
    <Body>
        <EditSqlServerHost Model="@editedHostConfiguration" OnSubmit="@SaveHost" />
    </Body>
</ServerModal>

@code {
    SqlServerHostConfiguration editedHostConfiguration;

    Action editModalSubscription;

    Boolean IsAdding => editedHostConfiguration?.Id == Guid.Empty;

    String EditModalTitleVerb => IsAdding ? "Add" : "Edit";

    protected override async Task OnParametersSetAsync()
    {
        await configuration.RefreshHosts(true);
    }

    void AddHost()
    {
        EditHost(new SqlServerHostConfiguration());
    }

    void EditHost(SqlServerHostConfiguration host)
    {
        editedHostConfiguration = host;
        editModalSubscription = () => { editModalSubscription = null; editedHostConfiguration = null; StateHasChanged(); };
        StateHasChanged();
    }

    async Task SaveHost(SqlServerHostConfiguration hostConfiguration)
    {
        //await configuration.UpdateLiveHosts(dbf => dbf.DoAsync(db => db.Add()));
        await configuration.UpdateLiveHosts(dbf => dbf.ReconcileAsync(hostConfiguration, e => { }));

        editModalSubscription = null; editedHostConfiguration = null;

        StateHasChanged();
    }
}
